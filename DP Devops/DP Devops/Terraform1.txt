**************************************************************************************
Terraform :-
**************************************************************************************

---> Terraform is an open-source infrastructure as code software tool that provides 
     a consistent CLI workflow to manage hundreds of cloud services.

---> HashiCorp Configuration Language (HCL) allows for concise descriptions of resources
     using blocks, arguments, and expressions.
======================================================================================
First create an instance and configure AWS CLI and Terraform in it.

Configuring AWS CLI in the instance:

$ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
$ unzip awscliv2.zip
$ sudo ./aws/install
$ 


Now, configure aws in the created instance

$ aws configure

Access Key ID: AKIA5JXHZEQQEL623OFA
Secret Access Key: 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
Region: ap-south-1
Output format: yaml


Configuring Terraform in the instance:

$ sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
$ sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
$ sudo apt-get update && sudo apt-get install terraform
$ terraform -help

================================================================================

$ mkdir terraform
$ cd terraform
$ vim main.tf

After writing script in main.tf file, save the file come out of editor.

Now, in order to run the TCL script we have to execute some commands.They are,

$ terraform init  ---  Downloads the required plugins
$ terraform validate --- Validates the script
$ terraform plan  --- It shows an overview of the work that is going to be done by the script.
$ terraform apply --- It now executes the script.

If we want to delete the infrastructure provisioned by main.tf file,

$ terraform destroy 

========================================================================================
****************************************************************************************

===HCL script for creating S3 bucket in AWS:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region = "ap-south-1"
}

module "s3_bucket" {
  source = "terraform-aws-modules/s3-bucket/aws"

  bucket = "dp888-s3-bucket"
  acl    = "private"

  versioning = {
    enabled = true
  }

}


*********************************************************************

===HCL script for creating an EC2 machine in AWS:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region = "ap-south-1"
}

module "ec2_instance" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "~> 3.0"

  name = "single-instance"

  ami                    = "ami-04b21e29a03aa7701"
  instance_type          = "t2.micro"
  key_name               = "Nagios"
  monitoring             = true
  vpc_security_group_ids = ["sg-0c83ba3ad90ab05f2"]
  subnet_id              = "subnet-0ac8d8ef79394ed89"

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}

***********************************************************************

===HCL script for creating a VPC in AWS:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region = "ap-south-1"
}

module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "demo-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["ap-south-1a", "ap-south-1b", "ap-south-1c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

  enable_nat_gateway = true
  enable_vpn_gateway = true

  tags = {
    Terraform = "true"
    Environment = "dev"
  }
}

*****************************************************************************
===HCL script for creating a VPC in AWS with variables:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region = "ap-south-1"
}

variable "private_subnets"{
  type = list(string)
 }
module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "demo-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["ap-south-1a", "ap-south-1b", "ap-south-1c"]
  private_subnets  = var.private_subnets
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

  enable_nat_gateway = true
  enable_vpn_gateway = true

  tags = {
    Terraform = "true"
    Environment = "dev"
  }
}

Variables file:

$ vim terraform.tfvars

private_subnets = [
"10.0.1.0/24",
"10.0.2.0/24",
"10.0.3.0/24"
]


*********************************************************************************************















